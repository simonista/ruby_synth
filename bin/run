#!/usr/bin/env ruby

class Angular
  attr_accessor :srate, :freq
  def initialize(f=440.0, srate=44.1e3)
    self.srate = srate
    self.freq = f

    @angle = 0
  end
 
  def freq=(arg)
    @freq = arg
    @angle_rate = Math::TWO_PI * @freq / @srate
  end  
 
  def update
    @angle += @angle_rate
    @angle -= Math::TWO_PI if @angle > Math::TWO_PI
  end
 
  def ticks(samples)
    samples.times.map{ update; tick(@angle) }
  end
end

class Sine < Angular
  def tick(angle)
    Math.sin(angle)
  end
end

class Square < Angular
  def tick(angle)
    angle < Math::PI ? 1.0 : -1.0
  end
end

class Sawtooth < Angular
  def tick(angle)
    res = angle / Math::PI
    res -= 2 if res > 1
    res
  end
end

class Triangle < Angular
  def tick(angle)
    if angle < Math::PI_HALVES
      angle / Math::PI_HALVES
    elsif angle < Math::THREE_PI_HALVES
      angle / -Math::PI_HALVES + 2
    else
      angle / Math::PI_HALVES - 4
    end
  end
end

class Additive
  attr_accessor :generators
  def initialize(generators)
    @generators = generators
  end

  def ticks(samples)
    sampled = generators.map{ |g| g.ticks(samples) }
    f = sampled.shift
    f.zip(*sampled).map{ |vals| vals.inject(:+) }
  end
end

require 'io/console'
require 'ruby_synth'

puts "starting"
stream = RubySynth::AudioStream.new(Square.new)
sleep(1)
stream.synth = Sine.new
sleep(1)
stream.synth = Sawtooth.new
sleep(1)
stream.synth = Triangle.new
sleep(1)

exit

s1 = Sine.new
stream = RubySynth::AudioStream.new(s1)

FREQ_INC = 1.05946309 # ~ 12th root of two

def getkey(s1)
  begin
    while c = STDIN.getch
      s1.freq *= FREQ_INC if c == 'u'
      s1.freq /= FREQ_INC if c == 'd'
      return true if c == 'q'
      exit(1) if c == "\u0003"
    end
    false
  rescue Errno::EINTR
    false
  rescue Errno::EAGAIN
    false
  rescue EOFError
    true
  end
end

loop do
  break if getkey(s1)
  sleep 0.1
end
